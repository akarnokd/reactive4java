#summary The so called marble diagrams of various implemented operators
#labels Featured

<wiki:toc max_depth="3" />

= Introduction =

This page lists the various operators and shows a marble diagram about how they relay events. These operators are static methods of the Observables utility class.

== Legend ==

|| http://reactive4java.googlecode.com/svn/trunk/Reactive4Java/docs/marbles/legend_values.png || Values of type {{{T}}}, {{{U}}}, {{{V}}} || http://reactive4java.googlecode.com/svn/trunk/Reactive4Java/docs/marbles/legend_terminates.png || Termination ||
|| http://reactive4java.googlecode.com/svn/trunk/Reactive4Java/docs/marbles/legend_errors.png || Errors originating from<br>{{{Observable<T>}}}, {{{Observable<U>}}}, {{{Observable<V>}}} || http://reactive4java.googlecode.com/svn/trunk/Reactive4Java/docs/marbles/legend_functions.png || Functions ||

= Methods =

== accumulate ==

=== relay first, accumulate after ===
{{{Observable<T> ys = accumulate(Observable<T> xs, Func2<T, T, T> f);}}}

Accumulate the Ts by using the function and relay each intermediate value to the output. The first input is just relayed as is, and starting from the second input the function is applied.

http://reactive4java.googlecode.com/svn/trunk/Reactive4Java/docs/marbles/accumulate_xs_f.png

=== accumulate by using seed ===

{{{Observable<T> ys = accumulate(Observable<T> xs, T seed, Func2<T, T, T> f);}}}

Accumulate the Ts and relay each intermediate value to the output. The accumulator starts whith the given seed value.

http://reactive4java.googlecode.com/svn/trunk/Reactive4Java/docs/marbles/accumulate_xs_seed_f.png

=== relay seed, accumulate by using seed ===

{{{Observable<T> ys = accumulate0(Observable<T> xs, T first, Func2<T, T, T> f);}}}

Accumulate the Ts and relay each intermediate value to the output. When the first T arrives, the seed is relayed followed by the f(T, seed) value. It pretends as if the seed value would be the first source T.

http://reactive4java.googlecode.com/svn/trunk/Reactive4Java/docs/marbles/accumulate0_xs_seed_f.png

== addTimeInterval ==

{{{Observable<TimeInterval<T>> ys = addTimeInterval(Observable<T> xs);}}}

Wraps each T into a time interval which notes how much time elapsed since the last appearance of a T or since the observer was registered. Uses {{{ System.nanoTime() }}} to compute the difference in nanosecond scale.

http://reactive4java.googlecode.com/svn/trunk/Reactive4Java/docs/marbles/add_time_interval_xs.png

== addTimestamped ==

{{{Observable<Timestamped<T>> ys = addTimestamped(Observable<T> xs)}}}

Wraps each T into a {{{Timestamped<T>}}} container with the current timestamp obtained from {{{System.currentTimeMillis()}}}. Remark: To unwrap the Ts, use [#removeTimestamped removeTimestamped] function.


http://reactive4java.googlecode.com/svn/trunk/Reactive4Java/docs/marbles/add_timestamped_xs.png

== aggregate ==

=== same type ===

{{{Observable<T> ys = aggregate(Observable<T> xs, Func2<T, T, T> f);}}}

Apply the aggregator function over the input observable and when the input finishes, relay the aggregated value and a finish to the output observer.

http://reactive4java.googlecode.com/svn/trunk/Reactive4Java/docs/marbles/aggregate_xs_f.png

=== different type ===

{{{Observable<U> ys = aggregate(Observable<T> xs, U seed, Func2<U, U, T> f);}}}

Takes the incoming Ts and aggregates it with the previous accumulator U value by using the supplied function (e.g., a stream of {{{Integer}}}s are accumulated into {{{Double}}}s). The accumulated value is released once the input terminates. The seed is used as the initial first partner for the first T to aggregate.

http://reactive4java.googlecode.com/svn/trunk/Reactive4Java/docs/marbles/aggregate_xs_seed_f.png

== all ==

{{{Observable<Boolean> ys = all(Observable<T> xs, Func1<Boolean, T> f);}}}

Tests the incoming Ts against a predicate and returns a single true if all Ts matched the predicate or returns a single false immediately when the predicate fails.

http://reactive4java.googlecode.com/svn/trunk/Reactive4Java/docs/marbles/all_xs_f.png

== amb ==

{{{Observable<T> zs = amb(Observable<T> xs, Observable<T> ys, ...);}}}

Start relaying events from the first observable who fires and ignore (deregister from) the rest. The name stands for ambiguous.

http://reactive4java.googlecode.com/svn/trunk/Reactive4Java/docs/marbles/amb_xs_ys.png

== any ==

=== first ===

{{{Observable<Boolean> ys = any(Observable<T> xs);}}}

Signals a true if the source observable sends any elements before its finish.

http://reactive4java.googlecode.com/svn/trunk/Reactive4Java/docs/marbles/any_xs.png

=== first matching a predicate ===

{{{Observable<Boolean> ys = any(Observable<T> xs, Func1<Boolean, T> f);}}}

Signals true if the source signals an element which matches the predicate before its finish (e.g., a sequence of {{{aaabb}}} and looking for a {{{b}}} the ys receives a true; a sequence of {{{aaaa}}} and looking for {{{b}}} will result in false.

http://reactive4java.googlecode.com/svn/trunk/Reactive4Java/docs/marbles/any_xs_f.png

== average ==

{{{Observable<V> ys = average(Observable<T> xs, Func2<U, U, T> sum, Func2<V, U, Integer> divide);}}}

Computes the average of the source Ts by first applying the sum function, and when the source terminates, it applies the divide function and submits the average value to the observer.

Convenience methods are available for the following types:

|| {{{Integer}}} || {{{Observable<Double> averageInteger(Observable<Integer> xs)}}} ||
|| {{{Long}}} || {{{Observable<Double> averageLong(Observable<Long> xs)}}} ||
|| {{{Float}}} || {{{Observable<Float> averageFloat(Observable<Float> xs)}}} ||
|| {{{Double}}} || {{{Observable<Double> averageDouble(Observable<Double> xs)}}} ||
|| {{{BigInteger}}} || {{{Observable<BigDecimal> averageBigInteger(Observable<BigInteger> xs)}}} ||
|| {{{BigDecimal}}} || {{{Observable<BigDecimal> averageBigDecimal(Observable<BigDecimal> xs)}}} ||

http://reactive4java.googlecode.com/svn/trunk/Reactive4Java/docs/marbles/average_xs_sum_divide.png

== buffer ==

=== limit by size ===

{{{Observable<List<T>> ys = buffer(Observable<T> xs, int size);}}}

Buffers the incoming elements up to a given size and submits a list of Ts once the buffer is filled or a finish() arrives. The if the finish() encounters an empty buffer, that is not sent to the output.

http://reactive4java.googlecode.com/svn/trunk/Reactive4Java/docs/marbles/buffer_xs_size.png

=== limit by time window ===

{{{Observable<List<T>> ys = buffer(Observable<T> xs, long interval, TimeUnit unit);}}}

Buffer the incoming Ts and release the list of Ts in the given timespan or when the finish() arrives. Even the empty buffers are submitted.

http://reactive4java.googlecode.com/svn/trunk/Reactive4Java/docs/marbles/buffer_xs_time_unit.png

=== limit by size or time window ===

{{{Observable<List<T>> ys = buffer(Observable<T> xs, int size, long interval, TimeUnit unit);}}}

http://reactive4java.googlecode.com/svn/trunk/Reactive4Java/docs/marbles/buffer_xs_size_time_unit.png

== concat ==

{{{Observable<T> zs = concat(Observable<T> xs, Observable<T> ys, ...);}}}

Relays the contents of each observable until it finishes then registers and continues with the next.

http://reactive4java.googlecode.com/svn/trunk/Reactive4Java/docs/marbles/concat_xs_ys.png

== contains ==

{{{Observable<T> ys = contains(Observable<T> xs, T constant);}}}

Special case of any() where the predicate contains an equality test with the constant. Equality is determined by reference and with {{{equals()}}}.

http://reactive4java.googlecode.com/svn/trunk/Reactive4Java/docs/marbles/contains_xs_constant.png

== count ==

=== 32 bit ===

{{{Observable<Integer> ys = count(Observable<T> xs);}}}

Counts the elements of the observable before the finish and submits this count value. The counter is an {{{int}}} which overflows after 2^31 elements.

http://reactive4java.googlecode.com/svn/trunk/Reactive4Java/docs/marbles/count_xs.png

=== 64 bit ===

{{{Observable<Long> ys = countLong(Observable<T> xs);}}}

Counts the elements of the observable before the finish and submits this count value. The counter is a {{{long}}} which overflows after 2^63 elements.

http://reactive4java.googlecode.com/svn/trunk/Reactive4Java/docs/marbles/count_xs.png


== removeTimestamped ==

{{{Observable<T> ys = removeTimestamped(Observable<Timestamped<T>> xs);}}}