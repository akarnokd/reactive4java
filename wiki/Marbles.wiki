#summary The so called marble diagrams of various implemented operators
#labels Featured

<wiki:toc max_depth="2" />

= Introduction =

This page lists the various operators and shows a marble diagram about how they relay events. These operators are static methods of the Observables utility class.

== Legend ==

|| http://reactive4java.googlecode.com/svn/trunk/Reactive4Java/docs/marbles/legend_values.png || Values of type {{{T}}}, {{{U}}}, {{{V}}} || http://reactive4java.googlecode.com/svn/trunk/Reactive4Java/docs/marbles/legend_terminates.png || Termination ||
|| http://reactive4java.googlecode.com/svn/trunk/Reactive4Java/docs/marbles/legend_errors.png || Errors originating from<br>{{{Observable<T>}}}, {{{Observable<U>}}}, {{{Observable<V>}}} || http://reactive4java.googlecode.com/svn/trunk/Reactive4Java/docs/marbles/legend_functions.png || Functions ||

= Methods =

== accumulate ==

{{{Observable<T> ys = accumulate(Observable<T> xs, Func2<T, T, T> f);}}}

Accumulate the Ts by using the function and relay each intermediate value to the output. The first input is just relayed as is, and starting from the second input the function is applied.

http://reactive4java.googlecode.com/svn/trunk/Reactive4Java/docs/marbles/accumulate_xs_f.png

{{{Observable<T> ys = accumulate(Observable<T> xs, T seed, Func2<T, T, T> f);}}}

Accumulate the Ts and relay each intermediate value to the output. The accumulator starts whith the given seed value.

http://reactive4java.googlecode.com/svn/trunk/Reactive4Java/docs/marbles/accumulate_xs_seed_f.png

{{{Observable<T> ys = accumulate0(Observable<T> xs, T first, Func2<T, T, T> f);}}}

Accumulate the Ts and relay each intermediate value to the output. When the first T arrives, the seed is relayed followed by the f(T, seed) value. It pretends as if the seed value would be the first source T.

http://reactive4java.googlecode.com/svn/trunk/Reactive4Java/docs/marbles/accumulate0_xs_seed_f.png

== addTimeInterval ==

{{{Observable<TimeInterval<T>> ys = addTimeInterval(Observable<T> xs);}}}

Wraps each T into a time interval which notes how much time elapsed since the last appearance of a T or since the observer was registered. Uses {{{ System.nanoTime() }}} to compute the difference in nanosecond scale.

http://reactive4java.googlecode.com/svn/trunk/Reactive4Java/docs/marbles/add_time_interval_xs.png

== addTimestamped ==

{{{Observable<Timestamped<T>> ys = addTimestamped(Observable<T> xs)}}}

Wraps each T into a {{{Timestamped<T>}}} container with the current timestamp obtained from {{{System.currentTimeMillis()}}}. Remark: To unwrap the Ts, use [#removeTimestamped removeTimestamped] function.


http://reactive4java.googlecode.com/svn/trunk/Reactive4Java/docs/marbles/add_timestamped_xs.png

== aggregate ==

{{{Observable<T> ys = aggregate(Observable<T> xs, Func2<T, T, T> f);}}}

Apply the aggregator function over the input observable and when the input finishes, relay the aggregated value and a finish to the output observer.

http://reactive4java.googlecode.com/svn/trunk/Reactive4Java/docs/marbles/aggregate_xs_f.png

{{{Observable<U> ys = aggregate(Observable<T> xs, U seed, Func2<U, U, T> f);}}}

Takes the incoming Ts and aggregates it with the previous accumulator U value by using the supplied function (e.g., a stream of {{{Integer}}}s are accumulated into {{{Double}}}s). The accumulated value is released once the input terminates. The seed is used as the initial first partner for the first T to aggregate.

http://reactive4java.googlecode.com/svn/trunk/Reactive4Java/docs/marbles/aggregate_xs_seed_f.png

== all ==

{{{Observable<Boolean> ys = all(Observable<T> xs, Func1<Boolean, T> f);}}}

Tests the incoming Ts against a predicate and returns a single true if all Ts matched the predicate or returns a single false immediately when the predicate fails.

http://reactive4java.googlecode.com/svn/trunk/Reactive4Java/docs/marbles/all_xs_f.png

== amb ==

{{{Observable<T> zs = amb(Observable<T> xs, Observable<T> ys, ...);}}}

Start relaying events from the first observable who fires and ignore (deregister from) the rest. The name stands for ambiguous.

http://reactive4java.googlecode.com/svn/trunk/Reactive4Java/docs/marbles/amb_xs_ys.png

== removeTimestamped ==

{{{Observable<T> ys = removeTimestamped(Observable<Timestamped<T>> xs);}}}